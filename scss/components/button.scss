@use "sass:map";

@mixin produce($config) {
  $button: map.get($config, "component", "button");

  // A button has no margin by default.
  .crud-btn {
    position: relative;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    border: 1px solid transparent;
    font-size: 1em;
    font-weight: 400;
    line-height: 1.25;
    border-radius: 0.25em;
    transition: all 0.1s ease-in-out;
    user-select: none;
    cursor: pointer;

    &.has-variations {
      padding-right: 1.5em;
    }
    
    &.small {
      .name {
        padding: 0.35em 0.6em;
      }
      font-size: 0.9em;
      border-radius: 0.2em;
    }

    &:active {
      box-shadow: 0 0 0 0.2em rgba(map.get($button, "box-shadow-color"), map.get($button, "box-shadow-opacity"));
    }

    &:focus {
      outline: none;
    }

    // BTN-DEFAULT
    &.type-default {
      color: map.get($button, "btn-default-text-color");
      background-color: map.get($button, "btn-default-background-color");

      &:hover,
      &:active,
      &:focus {
        background-color: map.get($button, "btn-default-background-color-hover");
      }

      &:active,
      &:focus {
        box-shadow: 0 0 0 0.2em map.get($button, "btn-default-box-shadow-color");
      }
    }

    // BTN-PRIMARY
    &.type-primary {
      color: map.get($button, "btn-primary-text-color");
      background-color: map.get($button, "btn-primary-background-color");

      &:hover,
      &:active,
      &:focus {
        background-color: map.get($button, "btn-primary-background-color-hover");
        border-color: map.get($button, "btn-primary-border-color-hover");
      }

      &:active,
      &:focus {
        box-shadow: 0 0 0 0.2em map.get($button, "btn-primary-box-shadow-color");
      }
    }

    // BTN-SUCCESS
    &.type-success {
      color: map.get($button, "btn-success-text-color");
      background-color: map.get($button, "btn-success-background-color");

      &:hover,
      &:active,
      &:focus {
        background-color: map.get($button, "btn-success-background-color-hover");
        border-color: map.get($button, "btn-success-border-color-hover");
      }

      &:active,
      &:focus {
        box-shadow: 0 0 0 0.2em map.get($button, "btn-success-box-shadow-color");
      }
    }

    // BTN-WARNING
    &.type-warn {
      color: map.get($button, "btn-warning-text-color");
      background-color: map.get($button, "btn-warning-background-color");

      &:hover,
      &:active,
      &:focus {
        background-color: map.get($button, "btn-warning-background-color-hover");
        border-color: map.get($button, "btn-warning-border-color-hover");
      }

      &:active,
      &:focus {
        box-shadow: 0 0 0 0.2em map.get($button, "btn-warning-box-shadow-color");
      }
    }

    // BTN-DANGER
    &.type-danger {
      color: map.get($button, "btn-danger-text-color");
      background-color: map.get($button, "btn-danger-background-color");

      &:hover,
      &:active,
      &:focus {
        background-color: map.get($button, "btn-danger-background-color-hover");
        border-color: map.get($button, "btn-danger-border-color-hover");
      }

      &:active,
      &:focus {
        box-shadow: 0 0 0 0.2em map.get($button, "btn-danger-box-shadow-color");
      }
    }

    // TODO: Rework?: Add to type stylings.
    &.active,
    &.active:active,
    &.active:hover {
      background: linear-gradient(rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.3));
      color: rgb(250, 250, 250);
    }

    &.disabled,
    &.disabled:hover,
    &.disabled:focus,
    &.disabled:active {
      background-color: #e2e2e2;
      border-color: #e2e2e2;
      color: #9a9a9a;
      cursor: default;
    }

    .crud-icon {
      font-size: 0.9em;
      margin-right: 0.3em;
    }

    .name {
      display: flex;
      flex-direction: row;
      justify-content: center;
      align-items: center;
      padding: 0.5em 0.75em;
    }

    .dropdown-trigger {
      position: absolute;
      right: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      padding-left: 0.25em;
      padding-right: 0.25em;
      border-left: 1px solid;
      height: 100%;
      cursor: pointer;

      .crud-icon {
        margin: 0;
      }
    }

    .dropdown {
      display: none;
      /* flex-direction: column; */
      position: absolute;
      top: 2.3em;
      z-index: 999;
      background-color: #1476cc3d;
      padding: 0.25em;
      left: 0em;
      border-radius: 0.3em;

      &.active {
        display: flex;
      }
    }
  }

  .crud-btn-wrapper {
    // Remove the gaps between the inline-block level buttons by using flexbox.
    display: inline-flex;
    flex-wrap: wrap;
    align-items: flex-start;
    align-content: flex-start;
    height: fit-content;

    // Compensate outer button margins.
    margin: -0.125em;

    .crud-btn {
      // Buttons should not stretch their height to fill the flexbox container.
      height: fit-content;

      // Button margin when in a group.
      margin: 0.125em;
    }
  }

  .crud-btn-group {
    // Remove the gaps between the inline-block level buttons by using flexbox.
    display: inline-flex;
    flex-wrap: nowrap;
    align-items: flex-start;
    align-content: flex-start;
    height: fit-content;

    margin: 0;

    // Buttons in a group should be attached.
    .crud-btn {
      margin: 0;

      &:first-child:not(:last-child) {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
      }

      &:not(:first-child):not(:last-child) {
        border-radius: 0;
      }

      &:last-child:not(:first-child) {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
      }
    }
  }
}
