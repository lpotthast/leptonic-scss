@use "sass:math";

// Settings
$-class-prefix: "leptonic-grid-";
$-grid-columns: 12;
$-tiers: (
  // LOW to HIGH !
  sm: 48em,
  md: 64em,
  lg: 75em,
  xl: 83em
);
$-outer-margin: 2em;
//$-gutter-width: 1em;
$-gutter-width: 0;

$-half-gutter-width: math.div($-gutter-width, 2);
//$-gutter-compensation: $-half-gutter-width * -1;
$-gutter-compensation: 0;

// Functions
@function tier-min($tier) {
  @if map-has-key($-tiers, $tier) {
    @return map-get($-tiers, $tier);
  }
  @warn "Unknown `#{$tier}` in $tiers.";
  @return null;
}

// Mixins
@mixin respond-to-tier($tier) {
  @if map-has-key($-tiers, $tier) {
    @media only screen and (min-width: #{map-get($-tiers, $tier)}) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$-tiers}`. "
        + "Please make sure it is defined in the `$tiers` map.";
  }
}

@mixin flex-start {
  justify-content: flex-start;
  //noinspection CssOverwrittenProperties
  text-align: left; // For backwards compatibility.
  //noinspection CssOverwrittenProperties
  text-align: start; // Modern approach, but "experimental" for Microsoft -.-
}

@mixin flex-center {
  justify-content: center;
  text-align: center;
}

@mixin flex-end {
  justify-content: flex-end;
  //noinspection CssOverwrittenProperties
  text-align: right; // For backwards compatibility.
  //noinspection CssOverwrittenProperties
  text-align: end; // Modern approach, but "experimental" for Microsoft -.-
}

@mixin flex-top {
  align-items: flex-start;
}

@mixin flex-middle {
  align-items: center;
  align-self: center; // added. keep?
}

@mixin flex-bottom {
  align-items: flex-end;
}

@mixin flex-around {
  justify-content: space-around;
}

@mixin flex-between {
  justify-content: space-between;
}

@mixin flex-first {
  order: -1;
}

@mixin flex-last {
  order: 1;
}

// We use a mixin, so we can use the code from inside a media query.
@mixin col {
  box-sizing: border-box;
  flex: 0 0 auto;
  flex-grow: 1;
  flex-basis: 0;
  max-width: 100%;
  padding-right: $-half-gutter-width;
  padding-left: $-half-gutter-width;
}

@mixin produce {
  // General styling
  .#{$-class-prefix}container,
  .#{$-class-prefix}container-fluid {
    display: flex;
    flex-direction: column;
    gap: 0.5em;

    //position: relative;
    //margin-right: auto;
    //margin-left: auto;
    //padding-right: $-outer-margin;
    //padding-left: $-outer-margin;
  }

  .#{$-class-prefix}row {
    box-sizing: border-box;
    display: flex;
    flex: 1 1 auto;
    flex-direction: row;
    flex-wrap: wrap;
    margin-right: $-gutter-compensation;
    margin-left: $-gutter-compensation;

    gap: 0.5em;

    &.crud-row-flex-row-reverse {
      flex-direction: row-reverse;
    }

    &.crud-row-flex-col-reverse {
      flex-direction: column-reverse;
    }
  }

  .#{$-class-prefix}col {
    @include col;

    &.#{$-class-prefix}col-flex {
      display: flex;
      flex-direction: column;
    }

    &.#{$-class-prefix}col-flex-col {
      flex-direction: column;
    }

    &.#{$-class-prefix}col-flex-col-reverse {
      flex-direction: column-reverse;
    }

    &.#{$-class-prefix}col-flex-row {
      flex-direction: row;
    }

    &.#{$-class-prefix}col-flex-row-reverse {
      flex-direction: row-reverse;
    }

    &.#{$-class-prefix}col-flex-start {
      @include flex-start;
    }

    &.#{$-class-prefix}col-flex-center {
      @include flex-center;
    }

    &.#{$-class-prefix}col-flex-end {
      @include flex-end;
    }

    &.#{$-class-prefix}col-flex-top {
      @include flex-top;
    }

    &.#{$-class-prefix}col-flex-middle {
      @include flex-middle;
    }

    &.#{$-class-prefix}col-flex-bottom {
      @include flex-bottom;
    }

    &.#{$-class-prefix}col-flex-around {
      @include flex-around;
    }

    &.#{$-class-prefix}col-flex-between {
      @include flex-between;
    }

    &.#{$-class-prefix}col-flex-first {
      @include flex-first;
    }

    &.#{$-class-prefix}col-flex-last {
      @include flex-last;
    }
  }

  /*
   * Generates classes and media queries for each defined tier:
   */
  @each $tier-name, $tier-min in $-tiers {
    /*
     * All col- classes of tiers (sm and up) need to be of 100% width until their tier is reached.
     */
    @for $i from 1 through $-grid-columns {
      .#{$-class-prefix}col-#{$tier-name}-#{$i} {
        @extend .#{$-class-prefix}col;
        flex-basis: 100%;
        max-width: 100%;
      }
    }
    @for $i from 0 to $-grid-columns {
      .#{$-class-prefix}col-#{$tier-name}-offset-#{$i} {
        margin-left: 0;
      }
    }
    @media only screen and (min-width: $tier-min) {
      // This ruleset would limit the grid to a certain width on each tier.
      /*.#{$-class-prefix}container {
        width: $tier-min + $-gutter-width;
        max-width: 100%;
      }*/
      .#{$-class-prefix}col-#{$tier-name}.#{$-class-prefix}col-#{$tier-name} {
        // Double specificity (DS)
        @include col;
      }
      @for $i from 1 through $-grid-columns {
        .#{$-class-prefix}col-#{$tier-name}-#{$i}.#{$-class-prefix}col-#{$tier-name}-#{$i} {
          // DS
          @extend .#{$-class-prefix}col-#{$tier-name};
          $percentage: percentage(math.div($i, $-grid-columns));
          flex-basis: calc($percentage - 0.5em); // TODO: Use gap variable!
          //max-width: $percentage;
        }
      }
      @for $i from 0 to $-grid-columns {
        .#{$-class-prefix}col-#{$tier-name}-offset-#{$i}.#{$-class-prefix}col-#{$tier-name}-offset-#{$i} {
          // DS
          @extend .#{$-class-prefix}col-#{$tier-name};
          margin-left: percentage(math.div($i, $-grid-columns));
        }
      }
      .#{$-class-prefix}col-flex-start-#{$tier-name} {
        @include flex-start;
      }
      .#{$-class-prefix}col-flex-center-#{$tier-name} {
        @include flex-center;
      }
      .#{$-class-prefix}col-flex-end-#{$tier-name} {
        @include flex-end;
      }
      .#{$-class-prefix}col-flex-top-#{$tier-name} {
        @include flex-top;
      }
      .#{$-class-prefix}col-flex-middle-#{$tier-name} {
        @include flex-middle;
      }
      .#{$-class-prefix}col-flex-bottom-#{$tier-name} {
        @include flex-bottom;
      }
      .#{$-class-prefix}col-flex-around-#{$tier-name} {
        @include flex-around;
      }
      .#{$-class-prefix}col-flex-between-#{$tier-name} {
        @include flex-between;
      }
      .#{$-class-prefix}col-flex-first-#{$tier-name} {
        @include flex-first;
      }
      .#{$-class-prefix}col-flex-last-#{$tier-name} {
        @include flex-last;
      }
    }
  }

  /*
   * Extra small (no-tag)
   */
  @for $i from 1 through $-grid-columns {
    .#{$-class-prefix}col-#{$i} {
      @extend .#{$-class-prefix}col;
      $percentage: percentage(math.div($i, $-grid-columns));
      flex-basis: calc($percentage - 0.5em); // TODO: Use gap variable!
      //max-width: $percentage;
    }
  }

  @for $i from 0 to $-grid-columns {
    .#{$-class-prefix}col-offset-#{$i} {
      @extend .#{$-class-prefix}col;
      margin-left: percentage(math.div($i, $-grid-columns));
    }
  }
}
